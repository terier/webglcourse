#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

var dependencies = {};
var queue = process.argv.slice(2).reverse().map(x => ({
    file     : path.resolve(x),
    includer : null
}));

while (queue.length > 0) {
    var next = queue.pop();
    if (next.file in dependencies) {
        continue;
    }

    // Read file
    try {
        var content = fs.readFileSync(next.file, 'utf8');
    } catch(e) {
        console.error('Cannot read file: ' + next.file);
        console.error('Included by: ' + next.includer);
        process.exit(-1);
    }

    // Extract and path-resolve dependencies
    var includeRe = /@@\S+/g;
    var matches = content.match(includeRe) || [];
    var files = matches.map(x => ({
        file     : path.resolve(path.dirname(next.file), x.substring(2)),
        includer : next.file
    }));
    queue = queue.concat(files);
    dependencies[next.file] = files.map(x => x.file);
}

// Topological sort
var cwd = process.cwd();
while (Object.keys(dependencies).length > 0) {
    var standalones = Object.keys(dependencies).filter(x => dependencies[x].length === 0);
    if (standalones.length === 0) {
        console.error('Circular dependencies detected');
        process.exit(-1);
    }

    // Pick first standalone file, output it, and remove it from the graph
    var next = standalones[0];
    console.log(path.relative(cwd, next));
    delete dependencies[next];
    for (key in dependencies) {
        dependencies[key] = dependencies[key].filter(x => x !== next);
    }
}
